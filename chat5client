#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <windows.h>
#include <string>
#include <iostream>

#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)

using namespace std;

SOCKET Connection;

enum Packet { Pack, Test };

DWORD WINAPI ClientThread(LPVOID sock) {
    SOCKET Con = ((SOCKET*)sock)[0];
    Packet packettype;

    while (1) {
        recv(Con, (char*)&packettype, sizeof(Packet), NULL);

        if (packettype == Pack) {
            cout << "type packet=PACK" << endl;
            int msg_size;
            recv(Con, (char*)&msg_size, sizeof(int), NULL);
            char* msg = new char[msg_size + 1];
            msg[msg_size] = '\0';
            recv(Con, msg, msg_size, NULL);
            cout << msg << endl;
            delete[] msg;
        }
        else {
            if (packettype == Test) {
                cout << "Test packet.\n";
            }
            else {
                cout << "Unknown packet: " << packettype << endl;
                break;
            }
        }
    }

    closesocket(Con);
    return 0;
}

int main() {
    WSAData wsaData;
    WORD Ver = MAKEWORD(2, 1);

    if (WSAStartup(Ver, &wsaData) != 0) {
        cout << "Error" << endl;
        exit(1);
    }

    SOCKADDR_IN addr;
    int sizeofaddr = sizeof(addr);
    addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    addr.sin_port = htons(123);
    addr.sin_family = AF_INET;

    Connection = socket(AF_INET, SOCK_STREAM, NULL);

    if (connect(Connection, (SOCKADDR*)&addr, sizeof(addr)) != 0) {
        cout << "Error: failed to connect to server.\n";
        return 1;
    }

    cout << "Connected!\n";

    CreateThread(NULL, NULL, ClientThread, &Connection, NULL, NULL);
    string msg1;

    while (true) {
        getline(cin, msg1);
        int msg_size = msg1.size();
        Packet packettype = Pack;

        send(Connection, (char*)&packettype, sizeof(Packet), NULL);
        send(Connection, (char*)&msg_size, sizeof(int), NULL);
        send(Connection, (char*)&msg1[0], msg_size, NULL);
        Sleep(10);
    }

    system("pause");
    return 0;
}
